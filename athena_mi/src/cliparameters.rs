pub fn cli<'a>() -> clap::ArgMatches<'a> {
    clap::App::new("Athena-MI")
      .version("0.1.0")
      .author("Alexander Lachmann <alexander.lachmann@gmail.com>")
      .about("Calculate probabilistic mutual information using B-splines")
      .arg(
        clap::Arg::with_name("input-file")
          .value_name("FILE")
          .short("i")
          .long("input-file")
          .takes_value(true)
          .required(true)
          .help("The gene count input file with genes as rows and samples as columns")
      )
      .arg(
        clap::Arg::with_name("output-file")
          .value_name("OUTFILE")
          .short("o")
          .long("output-file")
          .takes_value(true)
          .required(true)
          .help("The pairwise MI output")
      )
      .arg(
        clap::Arg::with_name("regulators")
          .value_name("REGULATORS")
          .short("r")
          .long("regulators")
          .takes_value(true)
          .required(false)
          .help("A file containing regulators/transcription factors (TF) per line. MI is calculated between TF and all genes. If not provided MI is calculated between all pairs of genes (slow).")
      )
      .arg(
        clap::Arg::with_name("column-delimiter")
          .value_name("DELIMITER")
          .short("d")
          .long("column-delimiter")
          .takes_value(true)
          .required(false)
          .help("The delimiter separating each column, defaults to tab")
      )
      .arg(
        clap::Arg::with_name("verbose")
          .value_name("VERBOSE")
          .short("v")
          .long("verbose")
          .takes_value(false)
          .required(false)
          .help("Activate additional output")
      )
      .arg(
        clap::Arg::with_name("thread-number")
          .value_name("THREADS")
          .short("t")
          .long("thread-number")
          .takes_value(true)
          .required(false)
          .help("Number of parallel threads, defaults to 4")
      )
      .arg(
        clap::Arg::with_name("method")
          .value_name("METHOD")
          .short("m")
          .long("method")
          .takes_value(true)
          .required(false)
          .help("Mutual Information method (spline (default) | fixed)")
      )
      .arg(
        clap::Arg::with_name("test-sample-count")
          .value_name("scount")
          .short("s")
          .long("sampletest ")
          .takes_value(true)
          .required(false)
          .help("Number of samples for test, defaults to 4")
      )
      .arg(
        clap::Arg::with_name("bin-number")
          .value_name("BINS")
          .short("b")
          .long("bin-number")
          .takes_value(true)
          .required(false)
          .help("Number of bins.")
      )
      .arg(
        clap::Arg::with_name("sample-cutoff")
          .value_name("cutoff")
          .short("c")
          .long("sample-cutoff")
          .takes_value(true)
          .required(false)
          .help("Number of samples")
      )
      .get_matches()
}